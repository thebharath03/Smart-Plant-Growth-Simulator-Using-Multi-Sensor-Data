# This is the code for ntegrating the sensors and taking the sensor readings.

// Include required libraries
#include <DHT.h>
#define DHTPIN 2        // DHT11 data pin connected to Arduino digital pin 2
#define DHTTYPE DHT11   // DHT11 sensor type
DHT dht(DHTPIN, DHTTYPE);

int moisturePin = A0;   // Soil moisture sensor connected to analog pin A0
int moistureValue;

// TCS3200 connections
#define S0 9
#define S1 10
#define S2 11
#define S3 12
#define OUT 8

void setup() {
  // Initialize Serial Monitor
  Serial.begin(9600);

  // Initialize DHT sensor
  dht.begin();

  // Initialize TCS3200 pins
  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);
  pinMode(OUT, INPUT);

  // Set frequency scaling for TCS3200
  digitalWrite(S0, HIGH);
  digitalWrite(S1, LOW);
}

void loop() {
  // Read temperature and humidity from DHT11
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Failed to read from DHT sensor!");
  } else {
    Serial.print("Temperature: ");
    Serial.print(temperature);
    Serial.print(" Â°C ");
    Serial.print("  Humidity: ");
    Serial.print(humidity);
    Serial.println(" %");

    // Calculate Vapor Pressure Deficit (VPD)
    float saturationVaporPressure = 0.6108 * exp((17.27 * temperature) / (temperature + 237.3));
    float actualVaporPressure = (humidity / 100.0) * saturationVaporPressure;
    float vpd = saturationVaporPressure - actualVaporPressure;
    Serial.print("Vapor Pressure Deficit (VPD): ");
    Serial.print(vpd);
    Serial.println(" kPa");
  }

  // Read soil moisture level
  moistureValue = analogRead(moisturePin);
  Serial.print("Soil Moisture: ");
  Serial.println(moistureValue);

  // Determine soil condition for green gram
  if (moistureValue < 350) {
    Serial.println("Soil Condition: Dry");
  } else if (moistureValue >= 350 && moistureValue <= 700) {
    Serial.println("Soil Condition: Optimal");
  } else {
    Serial.println("Soil Condition: Wet");
  }

  // Read TCS3200 output (simulating RGB values)
  digitalWrite(S2, LOW);
  digitalWrite(S3, LOW);
  int redFrequency = pulseIn(OUT, LOW);

  digitalWrite(S2, HIGH);
  digitalWrite(S3, HIGH);
  int blueFrequency = pulseIn(OUT, LOW);

  digitalWrite(S2, LOW);
  digitalWrite(S3, HIGH);
  int greenFrequency = pulseIn(OUT, LOW);

  Serial.print("Red: ");
  Serial.print(redFrequency);
  Serial.print("  Green: ");
  Serial.print(greenFrequency);
  Serial.print("  Blue: ");
  Serial.println(blueFrequency);

  // Chlorophyll content classification for green gram
  if (greenFrequency < 80 && redFrequency > 100 && blueFrequency > 100) {
    Serial.println("Chlorophyll Level: High (Healthy)");
  } else if (greenFrequency >= 80 && greenFrequency <= 140) {
    Serial.println("Chlorophyll Level: Medium (Moderate)");
  } else {
    Serial.println("Chlorophyll Level: Low (Deficient)");
  }

  // Delay for readability
  delay(2000);
}
